# My own snippets for coding
# If you want to back to the snippet, you should use continuous number not $0 at
# the end of the snippet, then you can back to the snippet, which is I want
# before

priority -40

global !p
from vimsnippets import foldmarker, make_box, get_comment_format
endglobal

# file information comment block
snippet fbox "file information comment block" b
`!p
if not snip.c:
	width = int(vim.eval("&textwidth - (virtcol('.') == 1 ? 0 : virtcol('.'))")) or 71
box = make_box(len(t[1]), width)
snip.rv = box[0]
snip += ' ' + box[1].strip() + ' '
`Filename: `!p snip.rv = snip.fn`
`!p
box = make_box(len(t[1]), width)
snip.rv = ' ' + box[1].strip() + ' '`Function: ${1:content}
`!p
box = make_box(1)
snip.rv = ' ' + box[1].rstrip() + ' '`Example:
`!p
box = make_box(1)
snip.rv = ' ' + box[1].rstrip() + ' ' + '\t' * 2`${2:none}
`!p
box = make_box(len(t[1]), width)
snip.rv = ' ' + box[1].strip() + ' '`Author: ${3:zhenguoli}
`!p
box = make_box(len(t[1]), width)
snip.rv = ' ' + box[1].strip() + ' '`Contact: ${4:zhenguoli@hust.edu.cn}
`!p
box = make_box(len(t[1]), width)
snip.rv = ' ' + box[1].strip() + ' '`Time: `date +'%d.%b.%Y %H:%M'`
`!p
box = make_box(len(t[1]), width)
# Remark(备注)
snip.rv = ' ' + box[1].strip() + ' '`Remark: ${5:none}`!p
box = make_box(len(t[1]), width)
snip += box[3]`
$0
endsnippet

# function parameter and function information
snippet fubox "comment box for function parameter and function" b
`!p
box = make_box(1, 1)
snip.rv = box[0][:3]
`
`!p
box = make_box(1)
snip.rv = ' ' + box[1].rstrip() + ' '`\brief: ${1:brief}
`!p
box = make_box(1)
snip.rv = ' ' + box[1].rstrip() + ' '`\param: ${2:none}
`!p
box = make_box(1)
snip.rv = ' ' + box[1].rstrip() + ' '`\return: ${3:none}
`!p
box = make_box(1)
snip.rv = ' ' + box[1].rstrip() + ' '`Example:
`!p
box = make_box(1)
snip.rv = ' ' + box[1].rstrip() + ' ' + '\t' * 2`${4:none}
`!p
box = make_box(1, 1)
snip.rv = box[3][-2:]`$0
endsnippet

snippet vimmode "Vim modeline" b
`!p
box = make_box(1)
snip.rv = type(box)
if (box[0].rstrip() == '-'):
	snip.rv = '#'
else:
	snip.rv = box[0].rstrip()[0:2]
` vim: set noet sts=4 sw=4 ts=4 tw=80${1:}: `!p
box = make_box(1)
if (box[-1].rstrip() == '-'):
	snip.rv = '#'
else:
	snip.rv = box[-1].rstrip()[-2:]
`$0
endsnippet

snippet fn "filename" w
`!p
snip.rv = fn
`${0}
endsnippet

snippet ffn "file fullname" w
`!v
expand('%:p')
`${0}
endsnippet

# Pairing character
# Why should I use the pair matching snippet, on one hand, release the `shift`
# key, on the other hand, it will know how to jump out of the pair.
# Special character English spelling
# # sharp | pound | hashtag | octothorpe | number sign
# ~ tilde
# & ampersand
# * asterisk
# OK, there will be some problems when the words ends with the character below
# is in another snippet, so define as fewer characters as possible

global !p
def exclude_functions(snip):
    exceptions = ['atoi', 'ab', 'stoi']
    for e in exceptions:
        if snip.buffer[snip.line][:snip.column].endswith(e):
            return False
    return True
endglobal

# imaginal mnemonic: < looks like v
snippet vv "angle bracket" iA
<${1}>${0}
endsnippet

# NOTE: `e` options is used to be controlled by `exclude_functions`.
context "exclude_functions(snip)"
snippet ii "parenthesis" iAe
(${1})${0}
endsnippet

snippet kk "curly bracket" iA
{${1}}${0}
endsnippet

# force mnemonic: z is used less
snippet yy "back tick" iA
\`${1}\`${0}
endsnippet

# force mnemonic: u is use less
snippet uu "bracket" iA
[${1}]${0}
endsnippet

# snippet s "single quote" i
# '${1}'${2}
# endsnippet

snippet qq "double quote" iA
"${1}"${0}
endsnippet

context "exclude_functions(snip)"
snippet bb "dollar $ sign" iAe
$${0}
endsnippet

snippet ,, "dereference" iA
->${0}
endsnippet

snippet uid "uuid" wA
uuid
endsnippet
